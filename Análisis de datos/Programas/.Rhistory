setwd("E:/UTN/7.SEPTIMO/SISTEMAS EMBEBIDOS/segundo bimestre/Informe_preguntas")
install.packages(c("Boruta", "mlbench"))
datos=read.csv("datos.csv",header=TRUE,sep=",")
library(caTools)
set.seed(222)
split=sample.split(datos$Label,SplitRatio = 0.80)
training_set=subset(datos,split==TRUE)
test_set=subset(datos,split==FALSE)
training_set$ï..Turbidez=rescale(training_set$ï..Turbidez,to=c(0,1))
training_set$Temperatura=rescale(training_set$Temperatura,to=c(0,1))
training_set$TDS=rescale(training_set$TDS,to=c(0,1))
training_set$PH=rescale(training_set$PH,to=c(0,1))
install.packages("mlbench")
install.packages("caret")
install.packages("Boruta")
training_set$ï..Turbidez=rescale(training_set$ï..Turbidez,to=c(0,1))
split=sample.split(datos$Label,SplitRatio = 0.80)
training_set=subset(datos,split==TRUE)
test_set=subset(datos,split==FALSE)
install.packages("knitr")
install.packages("nnet")
split=sample.split(datos$Label,SplitRatio = 0.80)
training_set=subset(datos,split==TRUE)
test_set=subset(datos,split==FALSE)
library(knitr)
library(ROCR)
library(e1071)
library(caTools)
library(nnet)
library(scales)
library(mlbench)
library(caret)
library(randomForest)
install.packages("mlbench")
library(knitr)
library(ROCR)
library(e1071)
library(caTools)
library(nnet)
library(scales)
library(mlbench)
library(caret)
library(randomForest)
datos=read.csv("datos.csv",header=TRUE,sep=",")
library(caTools)
set.seed(222)
split=sample.split(datos$Label,SplitRatio = 0.80)
training_set=subset(datos,split==TRUE)
test_set=subset(datos,split==FALSE)
training_set$ï..Turbidez=rescale(training_set$ï..Turbidez,to=c(0,1))
training_set$Temperatura=rescale(training_set$Temperatura,to=c(0,1))
training_set$ï..Turbidez=rescale(training_set$ï..Turbidez,to=c(0,1))
training_set$Temperatura=rescale(training_set$Temperatura,to=c(0,1))
training_set$TDS=rescale(training_set$TDS,to=c(0,1))
training_set$PH=rescale(training_set$PH,to=c(0,1))
test_set$ï..Turbidez=rescale(test_set$ï..Turbidez,to=c(0,1))
test_set$Temperatura=rescale(test_set$Temperatura,to=c(0,1))
test_set$TDS=rescale(test_set$TDS,to=c(0,1))
test_set$PH=rescale(test_set$PH,to=c(0,1))
test_set$PH=rescale(test_set$PH,to=c(0,1))
training_set$Label=factor(training_set$Label,levels=c(1,2,3))
test_set$Label=factor(test_set$Label,levels=c(1,2,3))
library(Boruta)
str(test_set)
View(datos)
#Feature Selection
borutaTem=Boruta(Label~ .,data=test_set,doTrace=2)
borutaTem
plot(borutaTem,las=2,cex.axis=0.7)
plotImpHistory(borutaTem)
bor=TentativeRoughFix(borutaTem)
attStats(borutaTem)
set.seed(420)
rf60=randomForest(Label~ .,data=training_set)
rf60
#predicction
p=predict(rf60,test_set)
confusionMatrix(p,test_set$Label)
View(training_set)
split=sample.split(datos$Label,SplitRatio = 0.80)
training_set=subset(datos,split==TRUE)
test_set=subset(datos,split==FALSE)
training_set$ï..Turbidez=rescale(training_set$ï..Turbidez,to=c(0,1))
training_set$Temperatura=rescale(training_set$Temperatura,to=c(0,1))
training_set$TDS=rescale(training_set$TDS,to=c(0,1))
training_set$PH=rescale(training_set$PH,to=c(0,1))
test_set$ï..Turbidez=rescale(test_set$ï..Turbidez,to=c(0,1))
test_set$Temperatura=rescale(test_set$Temperatura,to=c(0,1))
test_set$TDS=rescale(test_set$TDS,to=c(0,1))
test_set$PH=rescale(test_set$PH,to=c(0,1))
training_set$Label=factor(training_set$Label,levels=c(1,2,3))
test_set$Label=factor(test_set$Label,levels=c(1,2,3))
split= sample.split(datos$Label, SplitRatio=0.80)
training_set= subset(datos,split==TRUE)
test_set= subset(datos,split==FALSE)
training_set$ï..Turbidez=rescale(training_set$ï..Turbidez,to=c(0,1))
training_set$Temperatura=rescale(training_set$Temperatura,to=c(0,1))
training_set$TDS=rescale(training_set$TDS,to=c(0,1))
training_set$PH=rescale(training_set$PH,to=c(0,1))
test_set$ï..Turbidez=rescale(test_set$ï..Turbidez,to=c(0,1))
test_set$Temperatura=rescale(test_set$Temperatura,to=c(0,1))
test_set$TDS=rescale(test_set$TDS,to=c(0,1))
test_set$PH=rescale(test_set$PH,to=c(0,1))
training_set$Label=factor(training_set$Label,levels=c(1,2,3))
test_set$Label=factor(test_set$Label,levels=c(1,2,3)
library(knitr)
library(ROCR)
library(e1071)
library(caTools)
library(nnet)
library(scales)
library(mlbench)
library(caret)
library(randomForest)
training_set$ï..Turbidez=rescale(training_set$ï..Turbidez,to=c(0,1))
training_set$Temperatura=rescale(training_set$Temperatura,to=c(0,1))
training_set$TDS=rescale(training_set$TDS,to=c(0,1))
training_set$PH=rescale(training_set$PH,to=c(0,1))
test_set$ï..Turbidez=rescale(test_set$ï..Turbidez,to=c(0,1))
test_set$Temperatura=rescale(test_set$Temperatura,to=c(0,1))
test_set$TDS=rescale(test_set$TDS,to=c(0,1))
test_set$PH=rescale(test_set$PH,to=c(0,1))
training_set$Label=factor(training_set$Label,levels=c(1,2,3))
test_set$Label=factor(test_set$Label,levels=c(1,2,3))
View(datos)
View(training_set)
View(test_set)
y_pred=knn(train = training_set[,-5],
test =test_set[,-5],
cl=training_set[,5],
k=3)
#matriz confucion
cm=table(test_set$Label,y_pred)
cm
library(class)
y_pred=knn(train = training_set[,-5],
test =test_set[,-5],
cl=training_set[,5],
k=3)
#matriz confucion
cm=table(test_set$Label,y_pred)
cm
library(knitr)
library(ROCR)
library(e1071)
library(caTools)
library(nnet)
library(scales)
library(mlbench)
library(caret)
library(class)
training_set$Label=factor(training_set$Label,levels = c(1,2,3))
training_set=training_set[,-6]
#modelo
class_bayes=naiveBayes(x=training_set[,-5],
y=training_set[,5])
#predecir la etiqueta
y_pred=predict(class_bayes,newdata = test_set[,-5])
#matyriz de confucion
cm=table(test_set$Label,y_pred)
cm
library(NoiseFiltersR)
cnn_training_set=CNN(training_set)
cnn_training_set
cnn_training_set=cnn_training_set$cleanData
y_pred=knn(train = cnn_training_set[,-5],
test =test_set[,-5],
cl=cnn_training_set[,5],
k=1)
#matriz confucion
cm=table(test_set$Label,y_pred)
cm
y_pred=knn(train = cnn_training_set[,-5],
test =test_set[,-5],
cl=cnn_training_set[,5],
k=3)
cm=table(test_set$Label,y_pred)
cm
class_bayes=naiveBayes(x=cnn_training_set[,-5],
y=cnn_training_set[,5])
y_pred=predict(class_bayes,newdata = test_set[,-5])
cm=table(test_set$Label,y_pred)
cm
y_pred=knn(train = training_set[,-5],
test =test_set[,-5],
cl=training_set[,5],
k=3)
cm=table(test_set$Label,y_pred)
cm
39+39+21
99/117
training_set$Label=factor(training_set$Label,levels = c(1,2,3))
training_set=training_set[,-6]
class_bayes=naiveBayes(x=training_set[,-5],
y=training_set[,5])
y_pred=predict(class_bayes,newdata = test_set[,-5])
cm=table(test_set$Label,y_pred)
cm
38+32
70/117
library(NoiseFiltersR)
cnn_training_set=CNN(training_set)
cnn_training_set
cnn_training_set=cnn_training_set$cleanData
y_pred=knn(train = cnn_training_set[,-5],
test =test_set[,-5],
cl=cnn_training_set[,5],
k=3)
cm=table(test_set$Label,y_pred)
cm
39+32+25
96/117
class_bayes=naiveBayes(x=cnn_training_set[,-5],
y=cnn_training_set[,5])
y_pred=predict(class_bayes,newdata = test_set[,-5])
cm=table(test_set$Label,y_pred)
cm
38+16
54/117
split= sample.split(datos$Label, SplitRatio=0.80)
training_set= subset(datos,split==TRUE)
test_set= subset(datos,split==FALSE)
View(training_set)
View(test_set)
y_pred=knn(train = training_set[,-5],
test =test_set[,-5],
cl=training_set[,5],
k=3)
cm=table(test_set$Label,y_pred)
cm
training_set$Label=factor(training_set$Label,levels = c(1,2,3))
training_set=training_set[,-6]
class_bayes=naiveBayes(x=training_set[,-5],
y=training_set[,5])
y_pred=predict(class_bayes,newdata = test_set[,-5])
cm=table(test_set$Label,y_pred)
cm
library(NoiseFiltersR)
cnn_training_set=CNN(training_set)
cnn_training_set
cnn_training_set=cnn_training_set$cleanData
y_pred=knn(train = cnn_training_set[,-5],
test =test_set[,-5],
cl=cnn_training_set[,5],
k=3)
cm=table(test_set$Label,y_pred)
cm
class_bayes=naiveBayes(x=cnn_training_set[,-5],
y=cnn_training_set[,5])
y_pred=predict(class_bayes,newdata = test_set[,-5])
cm=table(test_set$Label,y_pred)
cm
y_pred=knn(train = training_set[,-5],
test =test_set[,-5],
cl=training_set[,5],
k=3)
cm=table(test_set$Label,y_pred)
cm
training_set$Label=factor(training_set$Label,levels = c(1,2,3))
training_set=training_set[,-6]
class_bayes=naiveBayes(x=training_set[,-5],
y=training_set[,5])
y_pred=predict(class_bayes,newdata = test_set[,-5])
cm=table(test_set$Label,y_pred)
cm
View(training_set)
View(test_set)
class_bayes=naiveBayes(x=cnn_training_set[,-5],
y=cnn_training_set[,5])
y_pred=predict(class_bayes,newdata = test_set[,-5])
cm=table(test_set$Label,y_pred)
cm
y_pred=knn(train = cnn_training_set[,-5],
test =test_set[,-5],
cl=cnn_training_set[,5],
k=3)
cm=table(test_set$Label,y_pred)
cm
class_bayes=naiveBayes(x=cnn_training_set[,-5],
y=cnn_training_set[,5])
y_pred=predict(class_bayes,newdata = test_set[,-5])
cm=table(test_set$Label,y_pred)
cm
